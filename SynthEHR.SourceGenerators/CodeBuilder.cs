using System;
using System.Text;

namespace SynthEHR.SourceGenerators;

/// <summary>
/// Helper class for building C# code with proper indentation.
/// </summary>
internal sealed class CodeBuilder
{
    private readonly StringBuilder _sb = new();
    private int _indentLevel;
    private bool _needsIndent = true;

    public CodeBuilder AppendLine(string? line = null)
    {
        if (line != null && _needsIndent)
        {
            _sb.Append(' ', _indentLevel * 4);
            _needsIndent = false;
        }

        if (line != null)
            _sb.Append(line);

        _sb.AppendLine();
        _needsIndent = true;
        return this;
    }

    public CodeBuilder Append(string text)
    {
        if (_needsIndent)
        {
            _sb.Append(' ', _indentLevel * 4);
            _needsIndent = false;
        }
        _sb.Append(text);
        return this;
    }

    public CodeBuilder OpenBrace()
    {
        AppendLine("{");
        _indentLevel++;
        return this;
    }

    public CodeBuilder CloseBrace(bool semicolon = false)
    {
        _indentLevel--;
        AppendLine(semicolon ? "};" : "}");
        return this;
    }

    public CodeBuilder AppendFileHeader()
    {
        AppendLine("// <auto-generated />");
        AppendLine("#nullable enable");
        AppendLine();
        return this;
    }

    public CodeBuilder AppendGeneratedCodeAttribute()
    {
        AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"SynthEHR.SourceGenerators.CsvDataSourceGenerator\", \"1.0.0\")]");
        AppendLine("[global::System.Runtime.CompilerServices.CompilerGenerated]");
        return this;
    }

    public CodeBuilder AppendXmlDocComment(string summary)
    {
        AppendLine("/// <summary>");
        AppendLine($"/// {EscapeXml(summary)}");
        AppendLine("/// </summary>");
        return this;
    }

    public CodeBuilder AppendNamespace(string namespaceName)
    {
        AppendLine($"namespace {namespaceName};");
        AppendLine();
        return this;
    }

    public CodeBuilder AppendClass(string className, string? baseClass = null, bool isPartial = false, bool isStatic = false)
    {
        var modifiers = "public";
        if (isPartial) modifiers += " partial";
        if (isStatic) modifiers += " static";

        if (baseClass != null)
            AppendLine($"{modifiers} class {className} : {baseClass}");
        else
            AppendLine($"{modifiers} class {className}");

        return this;
    }

    public CodeBuilder AppendProperty(string type, string name, string? defaultValue = null)
    {
        if (defaultValue != null)
            AppendLine($"public {type} {name} {{ get; set; }} = {defaultValue};");
        else
            AppendLine($"public {type} {name} {{ get; set; }} = default!;");
        return this;
    }

    public CodeBuilder AppendArrayInitializer(string elementType, string arrayName, string[] values)
    {
        AppendLine($"private static readonly {elementType}[] {arrayName} = new[]");
        OpenBrace();

        for (int i = 0; i < values.Length; i++)
        {
            var comma = i < values.Length - 1 ? "," : "";
            AppendLine($"\"{EscapeString(values[i])}\"{comma}");
        }

        CloseBrace(semicolon: true);
        AppendLine();
        return this;
    }

    public override string ToString() => _sb.ToString();

    private static string EscapeString(string value)
    {
        return value.Replace("\\", "\\\\")
                    .Replace("\"", "\\\"")
                    .Replace("\n", "\\n")
                    .Replace("\r", "\\r")
                    .Replace("\t", "\\t");
    }

    private static string EscapeXml(string value)
    {
        return value.Replace("&", "&amp;")
                    .Replace("<", "&lt;")
                    .Replace(">", "&gt;")
                    .Replace("\"", "&quot;")
                    .Replace("'", "&apos;");
    }
}
